// Andrique Liu

// FSM: operates the center light
module centerLight (clk, reset, in, out);
	input logic clk, reset, in;
	output logic out;
	
	// State variables.
	// None, Present
	enum { N, P } ps, ns;
	
	// Next State logic
//	always_comb begin
//		case (ps)
//			N: if (in) ns = P;
//				else ns = N;
//			P: if (in) ns = P;
//				else ns = N;
//		endcase
//	end
	
	always_comb begin
		case (ps)
			N: if (in) ns = P;
				else ns = N;
			P: ns = N;
		endcase
	end
	
	// Output logic - could also be another always, or part of above block.
	// When ps is P, output is true
	assign out = {ps == P};
//	assign out = in;
	
	// DFFs
	// !!! This means: only execute when you see a posedge of clk
	always_ff @(posedge clk)
		if (reset)
			ps <= N;  // at reset, go back to None
		else
			ps <= ns; // otherwise, go to the next state, dictated by NS logic

endmodule

// To simulate, you not only have to provide the inputs, but you also
// have to specify the clock, hence the testbench
module centerLight_testbench();
	logic clk, reset, in;
	logic out;
	
	uinput dut (clk, reset, in, out);
	
	// Set up the clock.
	parameter CLOCK_PERIOD=100;
	initial begin
		clk <= 0;
		forever #(CLOCK_PERIOD/2) clk <= ~clk;
	end
	
	// Set up the inputs to the design. Each line is a clock cycle.
	initial begin
								  @(posedge clk);		// !!! you wait for a posedge (and thus FSM)
	reset <= 1; 			  @(posedge clk);		// moves to the next state) before applying
	reset <= 0; in <= 0;   @(posedge clk);		// new inputs
								  @(posedge clk);
								  @(posedge clk);
								  @(posedge clk);
					  in <= 1; @(posedge clk);
					  in <= 1; @(posedge clk);
		  						  @(posedge clk);
					  in <= 0; @(posedge clk);
								  @(posedge clk);
					  in <= 1; @(posedge clk);
					  in <= 1; @(posedge clk);
					  in <= 0; @(posedge clk);
								  @(posedge clk);
					  in <= 1; @(posedge clk);
								  @(posedge clk);
	$stop; // End the simulation.
	end
endmodule